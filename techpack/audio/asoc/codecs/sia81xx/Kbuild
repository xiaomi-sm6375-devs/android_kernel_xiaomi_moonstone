# We can build either as part of a standalone Kernel build or as
# an external module.  Determine which mechanism is being used
# $(warning "Build audio driver, MODNAME value is $(MODNAME)")
ifeq ($(MODNAME),)
	KERNEL_BUILD := 1
else
	KERNEL_BUILD := 0
endif

ifeq ($(KERNEL_BUILD), 1)
	# These are configurable via Kconfig for kernel-based builds
	# Need to explicitly configure for Android-based builds
	AUDIO_BLD_DIR := $(shell pwd)/kernel/msm-5.4
	AUDIO_ROOT := $(AUDIO_BLD_DIR)/techpack/audio
endif

ifeq ($(KERNEL_BUILD), 0)
	ifeq ($(CONFIG_ARCH_WAIPIO), y)
		include $(AUDIO_ROOT)/config/waipioauto.conf
		INCS    +=  -include $(AUDIO_ROOT)/config/waipioautoconf.h
		-include $(AUDIO_ROOT)/oplus/config/opluswaipioauto.conf
		INCS    +=  -include $(AUDIO_ROOT)/oplus/config/opluswaipioautoconf.h
	endif
	ifeq ($(CONFIG_ARCH_PARROT), y)
		include $(AUDIO_ROOT)/config/waipioauto.conf
		INCS    +=  -include $(AUDIO_ROOT)/config/waipioautoconf.h
		-include $(AUDIO_ROOT)/oplus/config/opluswaipioauto.conf
		INCS    +=  -include $(AUDIO_ROOT)/oplus/config/opluswaipioautoconf.h
	endif
endif

# As per target team, build is done as follows:
# Defconfig : build with default flags
# Slub      : defconfig  + CONFIG_SLUB_DEBUG := y +
#	      CONFIG_SLUB_DEBUG_ON := y + CONFIG_PAGE_POISONING := y
# Perf      : Using appropriate msmXXXX-perf_defconfig
#
# Shipment builds (user variants) should not have any debug feature
# enabled. This is identified using 'TARGET_BUILD_VARIANT'. Slub builds
# are identified using the CONFIG_SLUB_DEBUG_ON configuration. Since
# there is no other way to identify defconfig builds, QTI internal
# representation of perf builds (identified using the string 'perf'),
# is used to identify if the build is a slub or defconfig one. This
# way no critical debug feature will be enabled for perf and shipment
# builds. Other OEMs are also protected using the TARGET_BUILD_VARIANT
# config.

############ UAPI ############
UAPI_DIR :=	uapi/audio
UAPI_INC :=	-I$(AUDIO_ROOT)/include/$(UAPI_DIR)

############ COMMON ############
COMMON_DIR :=	include
COMMON_INC :=	-I$(AUDIO_ROOT)/$(COMMON_DIR)

############ sia81xx ############
EN_SIPA_TUNING = n
DEVICE_TYPE_DIGITAL = n
PLATFORM_TYPE = mtk
EXTRA_CFLAGS += $(call cc-option,-Wno-date-time,)

ifeq ($(DEVICE_TYPE_DIGITAL),y)
EXTRA_CFLAGS += -DSIA91XX_TYPE

ifeq ($(PLATFORM_TYPE),mtk)
EXTRA_CFLAGS += -DPLATFORM_TYPE_MTK
subdir-ccflags-y += -I$(srctree)/sound/soc/mediatek/common
endif

ifeq ($(PLATFORM_TYPE),qcom)
EXTRA_CFLAGS += -DPLATFORM_TYPE_QCOM
endif

endif

# for nxp tfa98xx Codec
ifdef CONFIG_SND_SOC_SIA81XX
	SIA81XX_OBJS += sipa.o
	SIA81XX_OBJS += sipa_regmap.o
	SIA81XX_OBJS += sipa_aux_dev_if.o
	SIA81XX_OBJS += sipa_set_vdd.o
	SIA81XX_OBJS += sia91xx_common.o
	SIA81XX_OBJS += sipa_parameter.o
	SIA81XX_OBJS += sipa_tuning_cmd.o
	SIA81XX_OBJS += sipa_cal_spk.o
	SIA81XX_OBJS += sipa_timer_task.o
endif

ifeq ($(EN_SIPA_TUNING),y)
EXTRA_CFLAGS += -DSIPA_TUNING
SIA81XX_OBJS += sipa_socket.o
endif

ifeq ($(PLATFORM_TYPE),qcom)
SIA81XX_OBJS += sipa_afe.o
endif

ifeq ($(PLATFORM_TYPE),mtk)
SIA81XX_OBJS += sipa_tuning_if_dev.o
endif

ifeq ($(CONFIG_SND_SOC_SIA81XX),m)
EXTRA_CFLAGS += -DSIPA_COMPILE_TO_MODULE
endif

LINUX_INC +=	-Iinclude/linux

INCS +=		$(COMMON_INC) \
		$(UAPI_INC)

EXTRA_CFLAGS += $(INCS)


CDEFINES +=	-DANI_LITTLE_BYTE_ENDIAN \
		-DANI_LITTLE_BIT_ENDIAN \
		-DDOT11F_LITTLE_ENDIAN_HOST \
		-DANI_COMPILER_TYPE_GCC \
		-DANI_OS_TYPE_ANDROID=6 \
		-DPTT_SOCK_SVC_ENABLE \
		-Wall\
		-Werror\
		-D__linux__

KBUILD_CPPFLAGS += $(CDEFINES)

# Currently, for versions of gcc which support it, the kernel Makefile
# is disabling the maybe-uninitialized warning.  Re-enable it for the
# AUDIO driver.  Note that we must use EXTRA_CFLAGS here so that it
# will override the kernel settings.
ifeq ($(call cc-option-yn, -Wmaybe-uninitialized),y)
EXTRA_CFLAGS += -Wmaybe-uninitialized
endif
#EXTRA_CFLAGS += -Wmissing-prototypes

ifeq ($(call cc-option-yn, -Wheader-guard),y)
EXTRA_CFLAGS += -Wheader-guard
endif

ifeq ($(KERNEL_BUILD), 0)
KBUILD_EXTRA_SYMBOLS +=$(OUT)/obj/vendor/qcom/opensource/audio-kernel/ipc/Module.symvers
KBUILD_EXTRA_SYMBOLS +=$(OUT)/obj/vendor/qcom/opensource/audio-kernel/dsp/Module.symvers
KBUILD_EXTRA_SYMBOLS +=$(OUT)/obj/vendor/qcom/opensource/audio-kernel/asoc/Module.symvers
KBUILD_EXTRA_SYMBOLS +=$(OUT)/obj/vendor/qcom/opensource/audio-kernel/asoc/codecs/Module.symvers
KBUILD_EXTRA_SYMBOLS +=$(OUT)/obj/vendor/qcom/opensource/audio-kernel/soc/Module.symvers
KBUILD_EXTRA_SYMBOLS +=$(OUT)/obj/DLKM_OBJ/kernel_platform/msm-kernel/Module.symvers
endif

# Module information used by KBuild framework
obj-$(CONFIG_SND_SOC_SIA81XX) += sia81xx_dlkm.o
sia81xx_dlkm-y := $(SIA81XX_OBJS)
